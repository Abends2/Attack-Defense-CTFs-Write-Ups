from flask import Flask, request, render_template, session, send_file
import secrets
import hashlib
import hmac
import redis
import os
import logging as l  # noqa: E741
import tempfile
import sqlite3
import time
import io
import base64
from util import gen_flag

app = Flask(__name__)
USER_TTL_SECS = 10
BASE_PORT = 12000
REDIS_PREFIX = b's02_t%d_'
PW_SALT_LEN = 64
PBKDF_ITER = 10000
r = redis.Redis(host=os.getenv('REDIS_HOST', 'localhost'))

if 'SECRET_KEY' not in os.environ:
    l.warning('no SECRET_KEY specified, using default...')
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'lolThisIsSoInsecure...')


@app.before_request
def expire_users():
    request.team_id = int(request.environ['SERVER_PORT']) - BASE_PORT
    if 'team_id' in session:
        if request.team_id != session['team_id']:
            for key in list(session):
                del session[key]

    if 'username' in session:
        if not r.get((REDIS_PREFIX % request.team_id) + session['username']):
            del session['username']


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'GET':
        return '''Sorry, we can't afford fancy HTML registration forms!'''

    if 'username' in session:
        return 'You are already logged in...', 400

    req = request.form
    if 'username' not in req:
        return 'no username supplied :(', 400

    if 'password' not in req:
        return 'no password supplied :(', 400

    if 'password_confirm' not in req:
        return 'no password_confirm supplied :(', 400

    username = req.get('username').encode()
    password = req.get('password').encode()
    password_confirm = req.get('password_confirm').encode()

    user = r.get((REDIS_PREFIX % request.team_id) + username)
    if user:
        return 'username already exists :(', 400

    if password != password_confirm:
        return 'the passwords do not match :(', 400

    salt = secrets.token_bytes(PW_SALT_LEN)
    pwhash = hashlib.pbkdf2_hmac('sha256', password, salt, PBKDF_ITER)
    r.setex(
        (REDIS_PREFIX % request.team_id) + username,
        USER_TTL_SECS,
        salt + pwhash
    )

    return 'created user :)'


@app.route('/logout')
def logout():
    del session['username']


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'GET':
        return '''Sorry, we can't afford fancy HTML login forms!'''

    if 'username' in session:
        return 'You are already logged in...', 400

    req = request.form
    if 'username' not in req:
        return 'no username supplied :(', 400

    if 'password' not in req:
        return 'no password supplied :(', 400

    username = req.get('username').encode()
    password = req.get('password').encode()

    user = r.get((REDIS_PREFIX % request.team_id) + username)
    if not user:
        return 'wrong username :(', 400

    (salt, pwhash) = user[:PW_SALT_LEN], user[PW_SALT_LEN:]

    pwhash_input = hashlib.pbkdf2_hmac('sha256', password, salt, PBKDF_ITER)
    if not hmac.compare_digest(pwhash, pwhash_input):
        return 'wrong password :(', 400

    session['team_id'] = request.team_id
    session['username'] = username
    return 'logged in :)'


@app.route('/db.sqlite3')
def flags():
    if 'username' not in session:
        return 'You must be logged in :(', 400

    with tempfile.NamedTemporaryFile() as f:
        filename = f.name
        conn = sqlite3.connect(filename)

        c = conn.cursor()
        c.execute('''CREATE TABLE flags (time int, flag text)''')
        for t in [int(time.time() - x) for x in range(4)]:
            c.execute('''INSERT INTO flags VALUES (%d, "%s")''' % (
                t, base64.b64encode(gen_flag(2, request.team_id, t))
            ))
        conn.commit()
        conn.close()

        data = f.read()

    return send_file(
        io.BytesIO(data),
        download_name='db.sqlite3',
        mimetype='application/octet-stream'
    )


if __name__ == '__main__':
    app.run()
